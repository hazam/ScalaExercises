package forcomp

object Main extends App {
  import forcomp._
  val asbba = List(('a', 2), ('b', 2))
  def func(abba: List[(Char, Int)]): List[List[(Char, Int)]] = {
    if (abba.isEmpty) {
      List(Nil)
    } else {
      val head = abba.head
      val tail = abba.tail
      val combs =
        for (z <- 0 until head._2 + 1) yield {
          if (z == 0) (head._1, z)
          else (head._1, z)
        }
      val listC = combs.toList
      val yes = for (apair: (Char, Int) <- listC) yield {
        for (alist <- func(tail)) yield {
          apair :: alist
        }
      }
      yes.flatten
    }
  }
  println("Final "+func(asbba))
}