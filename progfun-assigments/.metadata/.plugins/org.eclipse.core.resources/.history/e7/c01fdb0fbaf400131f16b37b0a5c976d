package streams

object test {
  trait Level1 extends GameDef with Solver with StringParserTerrain {
    val level =
   """ooo-------
      |oSoooo----
      |ooooooooo-
      |-ooooooooo
      |-----ooToo
      |------ooo-""".stripMargin
  }
  val lev = new Level1 {

  }                                               //> lev  : streams.test.Level1 = streams.test$$anonfun$main$1$$anon$1@69ac44c2

  lev.pathsFromStart.take(3).toSet                //> java.util.NoSuchElementException: head of empty stream
                                                  //| 	at scala.collection.immutable.Stream$Empty$.head(Stream.scala:1028)
                                                  //| 	at scala.collection.immutable.Stream$Empty$.head(Stream.scala:1026)
                                                  //| 	at streams.Solver$class.from(Solver.scala:75)
                                                  //| 	at streams.test$$anonfun$main$1$$anon$1.from(streams.test.scala:13)
                                                  //| 	at streams.Solver$$anonfun$from$1.apply(Solver.scala:77)
                                                  //| 	at streams.Solver$$anonfun$from$1.apply(Solver.scala:77)
                                                  //| 	at scala.collection.immutable.Stream.append(Stream.scala:237)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$append$1.apply(Stream.scal
                                                  //| a:237)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$append$1.apply(Stream.scal
                                                  //| a:237)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1085)
                                                  //| 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1077)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$take$2.apply(Stream.scala:
                                                  //| 731)
                                                  //| 	at scala.collection.immutable.Stream$$anonfun$take$2.apply(Stream.sc
                                                  //| Output exceeds cutoff limit.
}